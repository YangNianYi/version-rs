name: ci

on:
  pull_request:
  push:
    #branches:
    #  - main

env:
  IMAGE: clux/version

jobs:
  docker:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Prepare image tags
        id: prep
        run: |
          TAG=$(grep -E "^version" Cargo.toml | awk -F"\"" '{print $2}' | head -n 1)
          IMAGE="${{ env.IMAGE }}"
          echo "semver=${TAG}" >> $GITHUB_OUTPUT
          if curl -sSL https://registry.hub.docker.com/v1/repositories/${IMAGE}/tags | jq -r ".[].name" | grep -q ${TAG}; then
            echo "Semver tag ${TAG} already exists - not publishing"
            echo "enable_semver=true" >> $GITHUB_OUTPUT
            # TODO: false
          else
            echo "Semver tag ${TAG} not found - publishing"
            echo "enable_semver=true" >> $GITHUB_OUTPUT
          fi

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - uses: docker/metadata-action@v4
        id: meta
        with:
          images: ${{ env.IMAGE }}
          labels: |
            org.opencontainers.image.version=${{ steps.prep.outputs.semver }}
            org.opencontainers.image.revision=${{ github.sha }}
            org.opencontainers.image.title=${{ env.IMAGE }}
          tags: |
            type=semver,pattern={{version}},value=${{ steps.prep.outputs.semver }},enable=${{ steps.prep.outputs.enable_semver }}
            type=raw,value=latest,enable={{is_default_branch}}

      - uses: docker/login-action@v2
        #if: github.event_name != 'pull_request'
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Go Build Cache for Docker
        uses: actions/cache@v3
        with:
          path: rust-cache
          key: ${{ runner.os }}-rust-cache-${{ hashFiles('**/Cargo.lock') }}

      - name: inject rust-cache into docker
        uses: overmindtech/buildkit-cache-dance/inject@main
        with:
          cache-source: rust-cache

      - uses: docker/build-push-action@v4
        with:
          context: .
          cache-from: type=gha
          cache-to: type=gha,mode=max
          #push: ${{ github.ref == 'refs/heads/main' }}
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          # TODO: append ,linux/arm64
          platforms: linux/amd64

      - name: extract rust-cache from docker
        uses: overmindtech/buildkit-cache-dance/extract@main
        with:
          cache-source: rust-cache

  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: nightly
          components: rustfmt,clippy
      - run: cargo +nightly fmt -- --check

      - uses: giraffate/clippy-action@v1
        with:
          reporter: 'github-pr-review'
          github_token: ${{ secrets.GITHUB_TOKEN }}
